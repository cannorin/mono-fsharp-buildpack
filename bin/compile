#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

# fail fast
set -e

MONO3_VM_BINARY="https://github.com/SuaveIO/mono-builder/releases/download/0.0.4/mono-3.12.1.tar.gz"
NUGET_BINARY="https://nuget.org/nuget.exe"
PAKET_BINARY="https://github.com/fsprojects/Paket/releases/download/2.40.9/paket.exe"

NUGET="${BUILD_DIR}/vendor/mono/bin/nuget.exe"
MOZROOT="${BUILD_DIR}/vendor/mono/lib/mono/4.5/mozroots.exe"
XBUILD="${BUILD_DIR}/vendor/mono/lib/mono/4.5/xbuild.exe"

echo "-----> Downloading mono to ${CACHE_DIR}/$STACK/vendor"
if [ ! -d ${CACHE_DIR}/$STACK/vendor/mono ]; then
    mkdir -p ${CACHE_DIR}/$STACK/vendor
    curl -L $MONO3_VM_BINARY -s | tar zxf - -C ${CACHE_DIR}/$STACK/vendor
    curl $NUGET_BINARY -L -o "${CACHE_DIR}/$STACK/vendor/mono/bin/nuget.exe"
    curl $PAKET_BINARY -L -o "${CACHE_DIR}/$STACK/vendor/mono/bin/paket.exe"
fi

echo "-----> Copying ${CACHE_DIR}/$STACK/vendor/mono/lib/mono/Microsoft SDKs/F#/3.1/Framework/v4.5/* to ${CACHE_DIR}/$STACK/vendor/mono/lib/mono/Microsoft SDKs/F#/3.1/Framework/4.0/"
echo "       This is for Mono on Debian."
mkdir -p "${CACHE_DIR}/$STACK/vendor/mono/lib/mono/Microsoft SDKs/F#/3.1/Framework/4.0/"
cp -pr "${CACHE_DIR}/$STACK/vendor/mono/lib/mono/Microsoft SDKs/F#/3.1/Framework/v4.5/Microsoft.FSharp.Targets" "${CACHE_DIR}/$STACK/vendor/mono/lib/mono/Microsoft SDKs/F#/3.1/Framework/4.0/"
cp -pr "${CACHE_DIR}/$STACK/vendor/mono/lib/mono/Microsoft SDKs/F#/3.1/Framework/v4.5/Microsoft.Portable.FSharp.Targets" "${CACHE_DIR}/$STACK/vendor/mono/lib/mono/Microsoft SDKs/F#/3.1/Framework/4.0/"

mkdir -p ${BUILD_DIR}/vendor

echo "-----> Copying ${CACHE_DIR}/$STACK/vendor/mono to ${BUILD_DIR}/vendor"
cp -pr "${CACHE_DIR}/$STACK/vendor/mono" "${BUILD_DIR}/vendor/"

rm -fr /app/vendor/mono

# Mono expects to be running out of /app
echo "-----> Linking ${BUILD_DIR}/vendor/mono --> /app"
ln -s "${BUILD_DIR}/vendor/mono" /app

cp -p /app/mono/bin/fsharpc /app/mono/bin/fsharpc-heroku
cp -p /app/mono/bin/fsharpi /app/mono/bin/fsharpi-heroku

echo "-----> Setting envvars"
export PATH="/app/mono/bin:$PATH"
export LD_LIBRARY_PATH="/app/mono/lib:$LD_LIBRARY_PATH"
echo "-----> Importing trusted root certificates"
mono $MOZROOT --sync --import
cp -r ~/.config ${BUILD_DIR}/.
cd ${BUILD_DIR}

if [ -f paket.lock ]; then
  echo "-----> paket.lock found, restoring packages with paket"
  mono /app/mono/bin/paket.exe restore
elif [ -f paket.dependencies ]; then
  echo "-----> paket.dependencies found, installing packages with paket"
  mono /app/mono/bin/paket.exe install
fi

if [ -f app.fsx ]; then
  if [ -f packages.config -o -f */packages.config ]; then
   echo "-----> packages.config found, installing dependencies with nuget"
   find  -name packages.config | xargs mono $NUGET install -o packages
  fi
  echo "-----> Compiling app.fsx"
  mono /app/mono/lib/mono/4.5/fsc.exe app.fsx
elif [ -f *.sln ]; then
  for sln in *.sln; do
    mono $NUGET restore $sln -PackagesDirectory packages
  done
  echo "-----> Compiling application"
  mono $XBUILD
fi

mkdir -p ${BUILD_DIR}/.profile.d
cp -n ${LP_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/
